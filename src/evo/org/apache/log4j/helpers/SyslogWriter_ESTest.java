/*
* This file was automatically generated by EvoSuite
* Fri Feb 28 18:33:50 GMT 2020
*/

package org.apache.log4j.helpers;

import org.apache.log4j.helpers.SyslogWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.net.SocketException;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class SyslogWriter_ESTest extends SyslogWriter_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     os valores escritos através de um função são iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter("");
        char[] charArray0 = new char[3];
        syslogWriter0.write(charArray0, 0, 0);
        assertArrayEquals(new char[]{'\u0000', '\u0000', '\u0000'}, charArray0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O único comportamento verificado é se o teste pode ser executado no tempo de 4s. O que não parece plausível para
    *     um teste que apenas instancia uma classe.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter("Malformed UIL: will att?mpt to interKret as InetAddress.");
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método write() com parâmetros inválidos lança uma SocketException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter("");
        char[] charArray0 = new char[3];
        syslogWriter0.close();
        try {
            syslogWriter0.write(charArray0, 0, 2);
            fail("Expecting exception: SocketException");

        } catch (SocketException e) {
            //
            // Socket is closed
            //
            verifyException("org.evosuite.runtime.mock.java.net.MockDatagramSocket", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método write() com parâmetros inválidos lança uma StringIndexOutOfBoundsException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test03() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter("");
        char[] charArray0 = new char[4];
        // Undeclared exception!
        try {
            syslogWriter0.write(charArray0, 39, 39);
            fail("Expecting exception: StringIndexOutOfBoundsException");

        } catch (StringIndexOutOfBoundsException e) {
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método write() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter("xE!^/q+");
        // Undeclared exception!
        try {
            syslogWriter0.write((char[]) null, 0, 0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O único comportamento verificado é se o teste pode ser executado no tempo de 4s. O que não parece plausível para
    *     um teste que escreve uma string curta.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter(" does not have a class function toLevel(String, Level)");
        syslogWriter0.write(" does not have a class function toLevel(String, Level)");
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método write() com parâmetros inválidos lança uma SocketException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter("");
        syslogWriter0.close();
        try {
            syslogWriter0.write("");
            fail("Expecting exception: SocketException");

        } catch (SocketException e) {
            //
            // Socket is closed
            //
            verifyException("org.evosuite.runtime.mock.java.net.MockDatagramSocket", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O único comportamento verificado é se o teste pode ser executado no tempo de 4s. O que não parece plausível para
    *     um teste que escreve uma string curta.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test07() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter("b:7");
        syslogWriter0.write("Malformed URL: will attempt to interpret as InetAddress.");
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método write() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test08() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter(":>&beGa:iw)t})s");
        // Undeclared exception!
        try {
            syslogWriter0.write((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.helpers.SyslogWriter", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O único comportamento verificado é se o teste pode ser executado no tempo de 4s. O que não parece plausível para
    *     um teste que escreve uma string curta.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test09() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter("], leve% [");
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o construtor de SyslogWriter com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test10() throws Throwable {
        SyslogWriter syslogWriter0 = null;
        try {
            syslogWriter0 = new SyslogWriter((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // syslogHost
            //
            verifyException("org.apache.log4j.helpers.SyslogWriter", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O único comportamento verificado é se o teste pode ser executado no tempo de 4s. O que não parece plausível para
    *     um teste que apenas dá um flush.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        SyslogWriter syslogWriter0 = new SyslogWriter("tZ.ymtdTk-R");
        syslogWriter0.flush();
    }
}
