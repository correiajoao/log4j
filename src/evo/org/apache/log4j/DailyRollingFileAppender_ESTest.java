/*
* This file was automatically generated by EvoSuite
* Fri Feb 28 02:23:07 GMT 2020
*/

package org.apache.log4j;

import org.apache.log4j.*;
import org.apache.log4j.spi.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.InterruptedIOException;
import java.text.SimpleDateFormat;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Map;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class DailyRollingFileAppender_ESTest extends DailyRollingFileAppender_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        System.setCurrentTimeMillis(1392409281319L);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger0 = nOPLoggerRepository0.getLogger("org.apache.log4j.LoggerTestCase$CountingAppender", (LoggerFactory) defaultCategoryFactory0);
        Level level0 = Level.ALL;
        InterruptedIOException interruptedIOException0 = new InterruptedIOException();
        String[] stringArray0 = new String[5];
        ThrowableInformation throwableInformation0 = new ThrowableInformation(stringArray0);
        LocationInfo locationInfo0 = new LocationInfo(interruptedIOException0, "org.apache.log4j.LoggerTestCase$CountingAppender");
        LoggingEvent loggingEvent0 = new LoggingEvent("org.apache.log4j.LoggerTestCase$CountingAppender", logger0, 654L, level0, interruptedIOException0, "org.apache.log4j.LoggerTestCase$CountingAppender", throwableInformation0, "1>0Z0<", locationInfo0, (Map) null);
        // Undeclared exception!
        try {
            dailyRollingFileAppender0.subAppend(loggingEvent0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // Unknown periodicity type.
            //
            verifyException("org.apache.log4j.RollingCalendar", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     getDatePattern() retorna um valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        dailyRollingFileAppender0.setEncoding(" d6M~x6Tc]jPGvR26F");
        dailyRollingFileAppender0.printPeriodicity(44);
        assertEquals("'.'yyyy-MM-dd", dailyRollingFileAppender0.getDatePattern());
    }


    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     getDatePattern() retorna um valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test03() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        dailyRollingFileAppender0.setEncoding(" d6M~x6Tc]jPGvR26F");
        dailyRollingFileAppender0.printPeriodicity(5);
        assertEquals("'.'yyyy-MM-dd", dailyRollingFileAppender0.getDatePattern());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     getDatePattern() retorna um valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        TTCCLayout tTCCLayout0 = new TTCCLayout();
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender(tTCCLayout0, "RELATIVE", "01D");
        assertEquals("01D", dailyRollingFileAppender0.getDatePattern());
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     getDatePattern() retorna um valor igual ao esperado. O teste não parece plausível pois possui similaridade com 3 e 1.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        dailyRollingFileAppender0.setEncoding("R{]D*GRG");
        dailyRollingFileAppender0.printPeriodicity(3);
        assertEquals("'.'yyyy-MM-dd", dailyRollingFileAppender0.getDatePattern());
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     getDatePattern() retorna um valor igual ao esperado. O teste não parece plausível pois possui similaridade com 3, 1 e 6.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test07() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        dailyRollingFileAppender0.name = "017!2";
        dailyRollingFileAppender0.printPeriodicity(2);
        assertEquals("'.'yyyy-MM-dd", dailyRollingFileAppender0.getDatePattern());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     getBufferedIO() retorna um valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test08() throws Throwable {
        MyPatternLayout myPatternLayout0 = new MyPatternLayout();
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender(myPatternLayout0, "\n", "\n");
        dailyRollingFileAppender0.encoding = "%r [%t] %p %c %x - %m%n";
        dailyRollingFileAppender0.printPeriodicity(1);
        assertFalse(dailyRollingFileAppender0.getBufferedIO());
    }


    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     computeCheckPeriod() retorna um valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        EnhancedPatternLayout enhancedPatternLayout0 = new EnhancedPatternLayout("]{l'~R");
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender(enhancedPatternLayout0, "akoct", "%m");
        int int0 = dailyRollingFileAppender0.computeCheckPeriod();
        assertEquals(0, int0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     computeCheckPeriod() retorna um valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test12() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        int int0 = dailyRollingFileAppender0.computeCheckPeriod();
        assertEquals(3, int0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test13() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        System.setCurrentTimeMillis(3);
        Class<Integer> class0 = Integer.class;
        Logger logger0 = Logger.getLogger(class0);
        Level level0 = Level.toLevel("PnOK=ybiWL>");
        MockThrowable mockThrowable0 = new MockThrowable("PnOK=ybiWL>");
        MockException mockException0 = new MockException("'.'yyyy-MM-dd", mockThrowable0);
        LoggingEvent loggingEvent0 = new LoggingEvent("'.'yyyy-MM-dd", logger0, level0, (Object) null, mockException0);
        // Undeclared exception!
        try {
            dailyRollingFileAppender0.subAppend(loggingEvent0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.WriterAppender", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test14() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        Logger logger0 = Logger.getLogger("0");
        Level level0 = (Level) Priority.FATAL;
        Object object0 = new Object();
        MockException mockException0 = new MockException();
        LoggingEvent loggingEvent0 = new LoggingEvent("0", logger0, level0, object0, mockException0);
        // Undeclared exception!
        try {
            dailyRollingFileAppender0.subAppend(loggingEvent0);
            fail("Expecting exception: IllegalStateException");

        } catch (IllegalStateException e) {
            //
            // Unknown periodicity type.
            //
            verifyException("org.apache.log4j.RollingCalendar", e);
        }
    }


    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado em 4s; Em seguida, se a chamada
    *     ao construtor de DailyRollingFileAppender com parâmetros inválidos lança uma IllegalArgumentException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test17() throws Throwable {
        MyPatternLayout myPatternLayout0 = new MyPatternLayout();
        DailyRollingFileAppender dailyRollingFileAppender0 = null;
        try {
            dailyRollingFileAppender0 = new DailyRollingFileAppender(myPatternLayout0, "iz]", "%r [%t] %p %c %x - %m%n");
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern character 'r'
            //
            verifyException("java.text.SimpleDateFormat", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado em 4s; Em seguida, se a chamada
    *     ao construtor de DailyRollingFileAppender com parâmetros inválidos lança uma FileNotFoundException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test18() throws Throwable {
        HTMLLayout hTMLLayout0 = new HTMLLayout();
        DailyRollingFileAppender dailyRollingFileAppender0 = null;
        try {
            dailyRollingFileAppender0 = new DailyRollingFileAppender(hTMLLayout0, "", "Title");
            fail("Expecting exception: FileNotFoundException");

        } catch (Throwable e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
        }
    }


    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     requiresLayout() retorna um valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test21() throws Throwable {
        PatternLayout patternLayout0 = new PatternLayout();
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender(patternLayout0, "\n", (String) null);
        dailyRollingFileAppender0.activateOptions();
        assertTrue(dailyRollingFileAppender0.requiresLayout());
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test22() throws Throwable {
        SimpleLayout simpleLayout0 = new SimpleLayout();
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender(simpleLayout0, "[Y@/FVk\"`Y oNDC", "0k7!2");
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        Logger logger0 = nOPLoggerRepository0.getRootLogger();
        Level level0 = Level.OFF;
        String[] stringArray0 = new String[3];
        ThrowableInformation throwableInformation0 = new ThrowableInformation(stringArray0);
        LocationInfo locationInfo0 = LocationInfo.NA_LOCATION_INFO;
        Hashtable<Locale, InterruptedIOException> hashtable0 = new Hashtable<Locale, InterruptedIOException>();
        LoggingEvent loggingEvent0 = new LoggingEvent("M@_HuaXpg}>/!", logger0, (-1L), level0, simpleLayout0, "[Y@/FVk\"`Y oNDC", throwableInformation0, "g", locationInfo0, hashtable0);
        dailyRollingFileAppender0.subAppend(loggingEvent0);
        assertNull(dailyRollingFileAppender0.getName());
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test23() throws Throwable {
        MyPatternLayout myPatternLayout0 = new MyPatternLayout();
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender(myPatternLayout0, "\n", "\n");
        dailyRollingFileAppender0.setFile("%m%n");
        EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("%m%n\n");
        FileSystemHandling.appendStringToFile(evoSuiteFile0, "%m%n");
        dailyRollingFileAppender0.rollOver();
        MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
        dailyRollingFileAppender0.sdf = (SimpleDateFormat) mockSimpleDateFormat0;
        dailyRollingFileAppender0.rollOver();
        assertTrue(dailyRollingFileAppender0.getImmediateFlush());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado em 4s; Em seguida, se a chamada
    *     ao método rollOver() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test24() throws Throwable {
        EnhancedPatternLayoutTest.DerivedPatternLayout enhancedPatternLayoutTest_DerivedPatternLayout0 = new EnhancedPatternLayoutTest.DerivedPatternLayout();
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender(enhancedPatternLayoutTest_DerivedPatternLayout0, "y:w ", "y:w ");
        dailyRollingFileAppender0.close();
        // Undeclared exception!
        try {
            dailyRollingFileAppender0.rollOver();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.File", e);
        }
    }


    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     getImmediateFlush() retorna um valor igual ao esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test25() throws Throwable {
        EnhancedPatternLayoutTest.DerivedPatternLayout enhancedPatternLayoutTest_DerivedPatternLayout0 = new EnhancedPatternLayoutTest.DerivedPatternLayout();
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender(enhancedPatternLayoutTest_DerivedPatternLayout0, "%r [%t] %p %c %x - %m%n", "\n");
        dailyRollingFileAppender0.setDatePattern((String) null);
        dailyRollingFileAppender0.rollOver();
        assertTrue(dailyRollingFileAppender0.getImmediateFlush());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado em 4s; Em seguida, se a chamada
    *     ao método computeCheckPeriod() com parâmetros inválidos lança uma IllegalArgumentException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test28() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        dailyRollingFileAppender0.setDatePattern("x:\"R`B*G.!L");
        // Undeclared exception!
        try {
            dailyRollingFileAppender0.computeCheckPeriod();
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Illegal pattern character 'x'
            //
            verifyException("java.text.SimpleDateFormat", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se a
    *     getDatePattern() retorna um valor igual ao esperado. O teste não parece plausível pois possui similaridade com 3, 1, 6 e 7.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test29() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        String string0 = dailyRollingFileAppender0.getDatePattern();
        assertNotNull(string0);
        assertEquals("'.'yyyy-MM-dd", string0);
    }
}
