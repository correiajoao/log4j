/*
* This file was automatically generated by EvoSuite
* Fri Feb 28 01:59:39 GMT 2020
*/

package org.apache.log4j;

import org.apache.log4j.DailyRollingFileAppender;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Layout;
import org.apache.log4j.SimpleLayout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.Writer;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class FileAppender_ESTest extends FileAppender_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    algumas variáveis de FileAppender possuem os valores esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        FileAppender fileAppender0 = new FileAppender();
        boolean boolean0 = fileAppender0.getBufferedIO();
        assertEquals(8192, fileAppender0.getBufferSize());
        assertTrue(fileAppender0.getAppend());
        assertFalse(boolean0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    getImmediateFlush() retorna o valor esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Layout layout0 = mock(Layout.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(layout0).getHeader();
        FileAppender fileAppender0 = new FileAppender(layout0, "\n");
        fileAppender0.setName("\n");
        fileAppender0.setFile("\n");
        assertEquals("", fileAppender0.getFile());

        fileAppender0.activateOptions();
        fileAppender0.activateOptions();
        assertTrue(fileAppender0.getImmediateFlush());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    getAppend() retorna o valor esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Layout layout0 = mock(Layout.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(layout0).getHeader();
        FileAppender fileAppender0 = new FileAppender(layout0, "\n", false, false, 3);
        fileAppender0.encoding = "";
        fileAppender0.setFile("");
        assertEquals("", fileAppender0.getFile());

        fileAppender0.activateOptions();
        assertFalse(fileAppender0.getAppend());
    }


    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    getImmediateFlush() retorna o valor esperado.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        FileAppender fileAppender0 = new FileAppender((Layout) null, "dEFvwKC[6zez.");
        fileAppender0.closeFile();
        assertTrue(fileAppender0.getAppend());
        assertEquals(8192, fileAppender0.getBufferSize());
        assertTrue(fileAppender0.getImmediateFlush());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    algumas variáveis de FileAppender possuem os valores esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Layout layout0 = mock(Layout.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(layout0).getHeader();
        FileAppender fileAppender0 = new FileAppender(layout0, "\n", false, false, 0);
        fileAppender0.setFile("");
        String string0 = fileAppender0.getFile();
        assertNotNull(string0);
        assertEquals("", fileAppender0.getFile());
    }


    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    algumas variáveis de FileAppender possuem os valores esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test08() throws Throwable {
        FileAppender fileAppender0 = new FileAppender();
        assertFalse(fileAppender0.getBufferedIO());

        fileAppender0.bufferedIO = true;
        boolean boolean0 = fileAppender0.getBufferedIO();
        assertTrue(boolean0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    a chamado ao método setQWForFiles() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test12() throws Throwable {
        FileAppender fileAppender0 = new FileAppender();
        // Undeclared exception!
        try {
            fileAppender0.setQWForFiles((Writer) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.Writer", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    a chamado ao método setFile() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Layout layout0 = mock(Layout.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(layout0).getHeader();
        FileAppender fileAppender0 = new FileAppender(layout0, "\n", true);
        // Undeclared exception!
        try {
            fileAppender0.setFile((String) null, true, false, 1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.File", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    a chamado ao método setFile() com parâmetros inválidos lança uma IllegalArgumentException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test15() throws Throwable {
        DailyRollingFileAppender dailyRollingFileAppender0 = new DailyRollingFileAppender();
        dailyRollingFileAppender0.errorHandler = null;
        // Undeclared exception!
        try {
            dailyRollingFileAppender0.setFile("UKiE,<+", true, true, 862);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Attempted to set null ErrorHandler.
            //
            verifyException("org.apache.log4j.helpers.QuietWriter", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    a chamado ao método setFile() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Layout layout0 = mock(Layout.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(layout0).getHeader();
        FileAppender fileAppender0 = new FileAppender(layout0, "\n");
        // Undeclared exception!
        try {
            fileAppender0.setFile((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.FileAppender", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *    a chamado ao método activateOptions() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test17() throws Throwable {
        FileAppender fileAppender0 = new FileAppender();
        fileAppender0.setFile("\n");
        fileAppender0.errorHandler = null;
        // Undeclared exception!
        try {
            fileAppender0.activateOptions();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.FileAppender", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O único comportamento verificado é se o teste pode ser executado em 4s. O que não parece viável para um teste
    *     que apenas faz append de MAX_VALUE em um arquivo.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test20() throws Throwable {
        SimpleLayout simpleLayout0 = new SimpleLayout();
        FileAppender fileAppender0 = new FileAppender(simpleLayout0, "\n", true, true, Integer.MAX_VALUE);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *   o construtor de FileAppender com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test21() throws Throwable {
        Layout layout0 = mock(Layout.class, new ViolatedAssumptionAnswer());
        FileAppender fileAppender0 = null;
        try {
            fileAppender0 = new FileAppender(layout0, (String) null, false, false, (-1007));
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.io.File", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *   o construtor de FileAppender com parâmetros inválidos lança uma IllegalArgumentException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Layout layout0 = mock(Layout.class, new ViolatedAssumptionAnswer());
        FileAppender fileAppender0 = null;
        try {
            fileAppender0 = new FileAppender(layout0, ";L3^\"m!X", true, true, (-2582));
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Buffer size <= 0
            //
            verifyException("java.io.BufferedWriter", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *   o construtor de FileAppender com parâmetros inválidos lança uma FileNotFoundException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test23() throws Throwable {
        Layout layout0 = mock(Layout.class, new ViolatedAssumptionAnswer());
        FileAppender fileAppender0 = null;
        try {
            fileAppender0 = new FileAppender(layout0, "", true, true, 1);
            fail("Expecting exception: FileNotFoundException");

        } catch (Throwable e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
        }
    }

}

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *   o construtor de FileAppender com parâmetros inválidos lança uma FileNotFoundException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test25() throws Throwable {
        FileAppender fileAppender0 = null;
        try {
            fileAppender0 = new FileAppender((Layout) null, "", false);
            fail("Expecting exception: FileNotFoundException");

        } catch (Throwable e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguinte comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *   o construtor de FileAppender com parâmetros inválidos lança uma FileNotFoundException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test27() throws Throwable {
        Layout layout0 = mock(Layout.class, new ViolatedAssumptionAnswer());
        FileAppender fileAppender0 = null;
        try {
            fileAppender0 = new FileAppender(layout0, "");
            fail("Expecting exception: FileNotFoundException");

        } catch (Throwable e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O único comportamento verificado é se o teste pode ser executado em 4s. O que não parece viável para um teste
    *     que apenas faz append de MAX_VALUE em um arquivo.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test29() throws Throwable {
        FileAppender fileAppender0 = new FileAppender();
        fileAppender0.setFile(") call failed.", true, true, Integer.MAX_VALUE);
    }

}
