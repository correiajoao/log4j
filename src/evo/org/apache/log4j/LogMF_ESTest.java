/*
* This file was automatically generated by EvoSuite
* Fri Feb 28 18:51:47 GMT 2020
*/

package org.apache.log4j;

import org.apache.log4j.*;
import org.apache.log4j.spi.LoggerFactory;
import org.apache.log4j.spi.LoggingEvent;
import org.apache.log4j.spi.NOPLogger;
import org.apache.log4j.spi.NOPLoggerRepository;
import org.apache.log4j.varia.LevelRangeFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.time.chrono.JapaneseDate;
import java.util.Date;
import java.util.Enumeration;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class LogMF_ESTest extends LogMF_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Class<Object> class0 = Object.class;
        Logger logger0 = Logger.getLogger(class0);
        LogMF.info(logger0, "xJ", false);
        Level level0 = LogXF.TRACE;
        Priority.toPriority((String) null);
        LogMF.logrb(logger0, level0, "xJ", "xJ", (Object) "xJ", (Object) logger0, (Object) logger0);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        NOPLogger nOPLogger0 = (NOPLogger) nOPLoggerRepository0.getRootLogger();
        MockException mockException0 = new MockException();
        MockException mockException1 = new MockException(mockException0);
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[2] = (Object) class0;
        objectArray0[3] = (Object) "xJ";
        LogMF.fatal((Logger) nOPLogger0, (Throwable) mockException1, "NeYq}`xBJ6 kBu\"n", objectArray0);
        LogMF.logrb(logger0, level0, "", "xJ", false);
        Logger logger1 = Category.exists("                ");
        // Undeclared exception!
        try {
            LogMF.warn(logger1, "", 10000);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.LogMF", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test002() throws Throwable {
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger0 = Logger.getLogger("", (LoggerFactory) defaultCategoryFactory0);
        Float float0 = new Float((-1190.48F));
        LogMF.trace(logger0, "", (Object) "", (Object) float0, (Object) logger0);
        Level level0 = Level.ERROR;
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 62;
        byteArray0[1] = (byte) 10;
        byteArray0[2] = (byte) 124;
        byteArray0[3] = (byte) (-26);
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        LogMF.logrb(logger0, level0, "", "org.apache.log4j.LogMF", 3336.381458);
        LogMF.info(logger0, "", (short) (-4828));
        LogMF.logrb(logger0, level0, "", "org.apache.log4j.pattern.LineLocationPatternConverter", false);
        LogMF.info(logger0, "", (byte) (-21));
        LogMF.trace(logger0, "org.apache.log4j.LogMF", (short) (byte) (-21));
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test003() throws Throwable {
        Logger logger0 = Logger.getLogger(":mC\"@");
        Level level0 = Level.toLevel("8#')N ");
        level0.levelStr = "a~";
        logger0.name = "f[_@k_~c5:";
        LogMF.log(logger0, level0, "8#')N ", false);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        nOPLoggerRepository0.getCurrentLoggers();
        Logger logger1 = nOPLoggerRepository0.getLogger((String) null);
        LogMF.logrb(logger1, level0, "8#')N ", "", (Object) logger0);
        LogMF.trace(logger0, "Y~6.o1|G", (float) 50000);
        LogMF.warn(logger1, "($5 Ogp-\"#)T!6'", (Object) logger1);
        Object[] objectArray0 = new Object[0];
        LogMF.trace(logger0, "($5 Ogp-\"#)T!6'", 1566.4F);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
        Logger logger2 = nOPLoggerRepository0.getLogger("some.cat");
        Double double0 = new Double(0.0);
        LogMF.logrb(logger1, level0, "8#')N ", "q@ktE9z`Bbj-Em", (Object) "Y~6.o1|G", (Object) null, (Object) "a~", (Object) double0);
        LogMF.trace(logger2, "tA`^", 802);
        LogMF.info(logger0, "", objectArray0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test004() throws Throwable {
        Class<Double> class0 = Double.class;
        Logger logger0 = Logger.getLogger(class0);
        Level level0 = Level.ERROR;
        Level.toLevel("", level0);
        LogMF.log(logger0, level0, "getClassName", (byte) 0);
        LogMF.logrb(logger0, level0, "getClassName", "getClassName", (short) 0);
        LogMF.trace(logger0, "-01-", 3597.1223F);
        LogMF.info(logger0, (Throwable) null, "getClassName", (Object[]) null);
        LogMF.debug(logger0, "org.apache.log4j.LogMF", 1832);
        Double double0 = new Double(0.0);
        LogMF.trace(logger0, "6`o&zH:ZbMF*", (Object) logger0, (Object) null, (Object) "", (Object) double0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test005() throws Throwable {
        Class<Object> class0 = Object.class;
        Logger logger0 = Logger.getLogger(class0);
        LogMF.info(logger0, "xJ", false);
        Level level0 = LogXF.TRACE;
        LogMF.logrb(logger0, level0, "xJ", "xJ", (Object) "xJ", (Object) logger0, (Object) logger0);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        Logger logger1 = nOPLoggerRepository0.getRootLogger();
        MockException mockException0 = new MockException();
        MockException mockException1 = new MockException(mockException0);
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) class0;
        objectArray0[2] = (Object) class0;
        objectArray0[3] = (Object) "xJ";
        LogMF.fatal(logger1, (Throwable) mockException1, "NeYq}`xBJ6 kBu\"n", objectArray0);
        LogMF.logrb(logger0, level0, "", "xJ", false);
        Category.exists("                ");
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test006() throws Throwable {
        Logger logger0 = Logger.getRootLogger();
        assertNotNull(logger0);
        assertTrue(logger0.isTraceEnabled());
        assertFalse(logger0.getAdditivity());
        assertEquals("root", logger0.getName());
        assertTrue(logger0.isDebugEnabled());
        assertFalse(logger0.isInfoEnabled());

        Level level0 = new Level(288, "", 57);
        assertEquals(30000, Priority.WARN_INT);
        assertEquals(20000, Priority.INFO_INT);
        assertEquals(5000, Level.TRACE_INT);
        assertEquals(10000, Priority.DEBUG_INT);
        assertEquals(50000, Priority.FATAL_INT);
        assertEquals(40000, Priority.ERROR_INT);
        assertEquals(Integer.MIN_VALUE, Priority.ALL_INT);
        assertEquals(Integer.MAX_VALUE, Priority.OFF_INT);
        assertNotNull(level0);
        assertEquals("", level0.toString());
        assertEquals(288, level0.toInt());
        assertEquals(57, level0.getSyslogEquivalent());

        Object object0 = new Object();
        assertNotNull(object0);

        LogMF.log(logger0, level0, "", (Object) "", (Object) logger0, object0);
        assertEquals(30000, Priority.WARN_INT);
        assertEquals(20000, Priority.INFO_INT);
        assertEquals(5000, Level.TRACE_INT);
        assertEquals(10000, Priority.DEBUG_INT);
        assertEquals(50000, Priority.FATAL_INT);
        assertEquals(40000, Priority.ERROR_INT);
        assertEquals(Integer.MIN_VALUE, Priority.ALL_INT);
        assertEquals(Integer.MAX_VALUE, Priority.OFF_INT);
        assertTrue(logger0.isTraceEnabled());
        assertFalse(logger0.getAdditivity());
        assertEquals("root", logger0.getName());
        assertTrue(logger0.isDebugEnabled());
        assertFalse(logger0.isInfoEnabled());
        assertEquals("", level0.toString());
        assertEquals(288, level0.toInt());
        assertEquals(57, level0.getSyslogEquivalent());

        Priority.toPriority("", (Priority) level0);
        LogMF.logrb(logger0, level0, "org.apache.log4j.LogMF", "", (Object) "org.apache.log4j.LogMF");
        Class<String> class0 = String.class;
        Logger logger1 = Logger.getLogger(class0);
        Object object1 = new Object();
        LogMF.info(logger1, "org.apache.log4j.LogMF", (Object) "org.apache.log4j.LogMF", (Object) "", object1);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test007() throws Throwable {
        Logger logger0 = Logger.getLogger(":mC\"@");
        assertNotNull(logger0);
        assertTrue(logger0.isTraceEnabled());
        assertTrue(logger0.isDebugEnabled());
        assertFalse(logger0.isInfoEnabled());
        assertTrue(logger0.getAdditivity());
        assertEquals("f[_@k_~c5:", logger0.getName());

        Level level0 = Level.toLevel("8#')N ");
        assertEquals(30000, Priority.WARN_INT);
        assertEquals(5000, Level.TRACE_INT);
        assertEquals(20000, Priority.INFO_INT);
        assertEquals(10000, Priority.DEBUG_INT);
        assertEquals(Integer.MIN_VALUE, Priority.ALL_INT);
        assertEquals(40000, Priority.ERROR_INT);
        assertEquals(50000, Priority.FATAL_INT);
        assertEquals(Integer.MAX_VALUE, Priority.OFF_INT);
        assertNotNull(level0);
        assertEquals("El'6A_8yC\"Wi96", level0.toString());
        assertEquals(10000, level0.toInt());
        assertEquals(7, level0.getSyslogEquivalent());

        level0.levelStr = "a~";
        assertEquals("a~", level0.toString());
        assertEquals(10000, level0.toInt());
        assertEquals(7, level0.getSyslogEquivalent());

        logger0.name = "f[_@k_~c5:";
        assertTrue(logger0.isTraceEnabled());
        assertTrue(logger0.isDebugEnabled());
        assertFalse(logger0.isInfoEnabled());
        assertTrue(logger0.getAdditivity());
        assertEquals("f[_@k_~c5:", logger0.getName());

        LogMF.log(logger0, level0, "8#')N ", false);
        assertEquals(30000, Priority.WARN_INT);
        assertEquals(5000, Level.TRACE_INT);
        assertEquals(20000, Priority.INFO_INT);
        assertEquals(10000, Priority.DEBUG_INT);
        assertEquals(Integer.MIN_VALUE, Priority.ALL_INT);
        assertEquals(40000, Priority.ERROR_INT);
        assertEquals(50000, Priority.FATAL_INT);
        assertEquals(Integer.MAX_VALUE, Priority.OFF_INT);
        assertTrue(logger0.isTraceEnabled());
        assertTrue(logger0.isDebugEnabled());
        assertFalse(logger0.isInfoEnabled());
        assertTrue(logger0.getAdditivity());
        assertEquals("f[_@k_~c5:", logger0.getName());
        assertEquals("a~", level0.toString());
        assertEquals(10000, level0.toInt());
        assertEquals(7, level0.getSyslogEquivalent());

        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        assertNotNull(nOPLoggerRepository0);

        Enumeration enumeration0 = nOPLoggerRepository0.getCurrentLoggers();
        assertNotNull(enumeration0);

        Logger logger1 = nOPLoggerRepository0.getLogger((String) null);
        assertNotNull(logger1);
        assertFalse(logger1.isTraceEnabled());
        assertFalse(logger1.isInfoEnabled());
        assertNull(logger1.getName());
        assertFalse(logger1.isDebugEnabled());
        assertTrue(logger1.getAdditivity());

        LogMF.logrb(logger1, level0, "8#')N ", "", (Object) logger0);
        assertEquals(30000, Priority.WARN_INT);
        assertEquals(5000, Level.TRACE_INT);
        assertEquals(20000, Priority.INFO_INT);
        assertEquals(10000, Priority.DEBUG_INT);
        assertEquals(Integer.MIN_VALUE, Priority.ALL_INT);
        assertEquals(40000, Priority.ERROR_INT);
        assertEquals(50000, Priority.FATAL_INT);
        assertEquals(Integer.MAX_VALUE, Priority.OFF_INT);
        assertTrue(logger0.isTraceEnabled());
        assertTrue(logger0.isDebugEnabled());
        assertFalse(logger0.isInfoEnabled());
        assertTrue(logger0.getAdditivity());
        assertEquals("f[_@k_~c5:", logger0.getName());
        assertEquals("a~", level0.toString());
        assertEquals(10000, level0.toInt());
        assertEquals(7, level0.getSyslogEquivalent());
        assertFalse(logger1.isTraceEnabled());
        assertFalse(logger1.isInfoEnabled());
        assertNull(logger1.getName());
        assertFalse(logger1.isDebugEnabled());
        assertTrue(logger1.getAdditivity());

        LogMF.trace(logger0, "Y~6.o1|G", (float) 50000);
        assertTrue(logger0.isTraceEnabled());
        assertTrue(logger0.isDebugEnabled());
        assertFalse(logger0.isInfoEnabled());
        assertTrue(logger0.getAdditivity());
        assertEquals("f[_@k_~c5:", logger0.getName());

        LogMF.warn(logger1, "($5 Ogp-\"#)T!6'", (Object) logger1);
        assertFalse(logger1.isTraceEnabled());
        assertFalse(logger1.isInfoEnabled());
        assertNull(logger1.getName());
        assertFalse(logger1.isDebugEnabled());
        assertTrue(logger1.getAdditivity());

        LogMF.trace(logger0, "", (byte) 0);
        assertTrue(logger0.isTraceEnabled());
        assertTrue(logger0.isDebugEnabled());
        assertFalse(logger0.isInfoEnabled());
        assertTrue(logger0.getAdditivity());
        assertEquals("f[_@k_~c5:", logger0.getName());

        Object[] objectArray0 = new Object[0];
        LogMF.logrb(logger1, level0, "", "", objectArray0);
        assertEquals(30000, Priority.WARN_INT);
        assertEquals(5000, Level.TRACE_INT);
        assertEquals(20000, Priority.INFO_INT);
        assertEquals(10000, Priority.DEBUG_INT);
        assertEquals(Integer.MIN_VALUE, Priority.ALL_INT);
        assertEquals(40000, Priority.ERROR_INT);
        assertEquals(50000, Priority.FATAL_INT);
        assertEquals(Integer.MAX_VALUE, Priority.OFF_INT);
        assertEquals("a~", level0.toString());
        assertEquals(10000, level0.toInt());
        assertEquals(7, level0.getSyslogEquivalent());
        assertFalse(logger1.isTraceEnabled());
        assertFalse(logger1.isInfoEnabled());
        assertNull(logger1.getName());
        assertFalse(logger1.isDebugEnabled());
        assertTrue(logger1.getAdditivity());
        assertEquals(0, objectArray0.length);

        LogMF.trace(logger0, "/Q:Y`P", 1566.4F);
        assertTrue(logger0.isTraceEnabled());
        assertTrue(logger0.isDebugEnabled());
        assertFalse(logger0.isInfoEnabled());
        assertTrue(logger0.getAdditivity());
        assertEquals("f[_@k_~c5:", logger0.getName());

        Logger logger2 = nOPLoggerRepository0.getLogger("some.cat");
        assertFalse(logger2.equals((Object) logger1));
        assertNotSame(logger2, logger1);
        assertNotNull(logger2);
        assertEquals("some.cat", logger2.getName());
        assertTrue(logger2.getAdditivity());
        assertFalse(logger2.isDebugEnabled());
        assertFalse(logger2.isTraceEnabled());
        assertFalse(logger2.isInfoEnabled());

        Double double0 = new Double(0.0);
        assertEquals(0.0, (double) double0, 0.01);
        assertNotNull(double0);

        LogMF.logrb(logger1, level0, "8#')N ", "q@ktE9z`Bbj-Em", (Object) "Y~6.o1|G", (Object) null, (Object) "a~", (Object) double0);
        assertFalse(logger1.equals((Object) logger2));
        assertNotSame(logger1, logger2);
        assertEquals(30000, Priority.WARN_INT);
        assertEquals(5000, Level.TRACE_INT);
        assertEquals(20000, Priority.INFO_INT);
        assertEquals(10000, Priority.DEBUG_INT);
        assertEquals(Integer.MIN_VALUE, Priority.ALL_INT);
        assertEquals(40000, Priority.ERROR_INT);
        assertEquals(50000, Priority.FATAL_INT);
        assertEquals(Integer.MAX_VALUE, Priority.OFF_INT);
        assertEquals("a~", level0.toString());
        assertEquals(10000, level0.toInt());
        assertEquals(7, level0.getSyslogEquivalent());
        assertFalse(logger1.isTraceEnabled());
        assertFalse(logger1.isInfoEnabled());
        assertNull(logger1.getName());
        assertFalse(logger1.isDebugEnabled());
        assertTrue(logger1.getAdditivity());

        LogMF.logrb(logger0, level0, "", "org.apache.log4j.PropertyConfigurator", 'Z');
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test008() throws Throwable {
        FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
        Class<Float> class0 = Float.class;
        Logger logger0 = Logger.getLogger(class0);
        Float float0 = new Float(0.0);
        Float.max(2550.8F, 773.823F);
        FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
        Float float1 = new Float((-1.0F));
        Float.max((-1.0F), (-1.0F));
        LogMF.trace(logger0, "", (Object) float0, (Object) class0, (Object) float1, (Object) float1);
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger1 = Logger.getLogger("", (LoggerFactory) defaultCategoryFactory0);
        LogMF.trace(logger1, "", (-5288));
        LevelRangeFilter levelRangeFilter0 = new LevelRangeFilter();
        levelRangeFilter0.getLevelMax();
        Object object0 = new Object();
        Object object1 = new Object();
        // Undeclared exception!
        try {
            LogMF.log(logger1, (Level) null, "", (Object) levelRangeFilter0, object0, object1);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.Category", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Logger logger0 = Logger.getRootLogger();
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        logger0.removeAllAppenders();
        Level level0 = nOPLoggerRepository0.getThreshold();
        nOPLoggerRepository0.getCurrentLoggers();
        Priority.toPriority("0", (Priority) level0);
        Level level1 = (Level) Priority.toPriority("//s6+oo");
        LogMF.logrb(logger0, level0, "w?eiR}xy^76yh;", "K4a{JM}Bta*?tFq", (byte) 10);
        Logger logger1 = Logger.getLogger("K4a{JM}Bta*?tFq");
        LogMF.log(logger1, level0, "", (int) (byte) 10);
        level0.levelStr = "W1nG`+56AqT!oCwP";
        Integer integer0 = new Integer(1306);
        LogMF.log(logger1, level0, "w?eiR}xy^76yh;", (Object) integer0);
        LogMF.warn(logger0, "K4a{JM}Bta*?tFq", (long) 20000);
        MockThrowable mockThrowable0 = new MockThrowable("");
        logger1.error((Object) level1, (Throwable) mockThrowable0);
        LogMF.warn(logger0, "z]:}rg`'F'g", true);
        LogMF.warn(logger1, "K4a{JM}Bta*?tFq", (Object) nOPLoggerRepository0);
        LogMF.logrb(logger0, level0, "logger", "W1nG`+56AqT!oCwP", (Object[]) null);
        NOPLogger nOPLogger0 = (NOPLogger) nOPLoggerRepository0.getLogger("W1nG`+56AqT!oCwP");
        LogMF.info((Logger) nOPLogger0, "//s6+oo", 0.0);
        LogMF.log(logger1, level1, "0", 2546.453);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test012() throws Throwable {
        FileSystemHandling.shouldAllThrowIOExceptions();
        FileSystemHandling.shouldAllThrowIOExceptions();
        System.setCurrentTimeMillis(3005L);
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger0 = Logger.getLogger("", (LoggerFactory) defaultCategoryFactory0);
        Object[] objectArray0 = new Object[4];
        objectArray0[0] = (Object) logger0;
        objectArray0[1] = (Object) "";
        objectArray0[2] = (Object) logger0;
        defaultCategoryFactory0.makeNewLoggerInstance("xO2+&PoI)#'aDXO'+D");
        objectArray0[3] = (Object) defaultCategoryFactory0;
        LogMF.error(logger0, "", objectArray0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test013() throws Throwable {
        Logger logger0 = Logger.getLogger("");
        LogMF.debug(logger0, "", (Object) logger0);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        nOPLoggerRepository0.getLogger("", (LoggerFactory) defaultCategoryFactory0);
        Logger logger1 = nOPLoggerRepository0.getRootLogger();
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) logger0;
        objectArray0[1] = (Object) nOPLoggerRepository0;
        logger1.setAdditivity(false);
        objectArray0[2] = (Object) logger0;
        logger1.fatal((Object) nOPLoggerRepository0);
        objectArray0[3] = (Object) "";
        objectArray0[4] = (Object) logger1;
        objectArray0[5] = (Object) logger1;
        LogMF.error(logger1, "org.apache.log4j.or.DefaultRenderer", objectArray0);
        Integer integer0 = new Integer(1);
        LogMF.log(logger1, (Level) null, "", (Object) integer0, objectArray0[5], (Object) nOPLoggerRepository0);
        JapaneseDate japaneseDate0 = MockJapaneseDate.now();
        LogMF.info(logger0, "", (Object) japaneseDate0, (Object) "");
        MockException mockException0 = new MockException();
        MockThrowable mockThrowable0 = new MockThrowable(mockException0);
        Object[] objectArray1 = new Object[2];
        mockThrowable0.getStackTrace();
        objectArray1[0] = (Object) mockException0;
        objectArray1[1] = (Object) "";
        LogMF.info(logger0, (Throwable) mockThrowable0, "", objectArray1);
        Float float0 = new Float((-240.0F));
        LogMF.info(logger1, "_3+DP>qQ", (Object) "", (Object) nOPLoggerRepository0, (Object) float0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test014() throws Throwable {
        Class<Object> class0 = Object.class;
        Logger logger0 = Logger.getLogger(class0);
        LogMF.info(logger0, "xJ", false);
        Level level0 = LogXF.TRACE;
        Priority.toPriority((String) null);
        LogMF.logrb(logger0, level0, "xJ", "xJ", (Object) "xJ", (Object) logger0, (Object) logger0);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        Logger logger1 = nOPLoggerRepository0.getRootLogger();
        FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
        MockException mockException0 = new MockException();
        MockException mockException1 = new MockException(mockException0);
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) class0;
        objectArray0[2] = (Object) class0;
        objectArray0[3] = (Object) "xJ";
        LogMF.fatal(logger1, (Throwable) mockException1, "NeYq}`xBJ6 kBu\"n", objectArray0);
        LogMF.logrb(logger0, level0, "", "xJ", false);
        Logger logger2 = Category.exists("                ");
        // Undeclared exception!
        try {
            LogMF.warn(logger2, "", 10000);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.LogMF", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test015() throws Throwable {
        Logger logger0 = Logger.getLogger("");
        FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        Level level0 = nOPLoggerRepository0.getThreshold();
        MockThrowable mockThrowable0 = new MockThrowable();
        LoggingEvent loggingEvent0 = new LoggingEvent("org.apache.log4j.LogMF", logger0, 0L, level0, logger0, mockThrowable0);
        String[] stringArray0 = loggingEvent0.getThrowableStrRep();
        logger0.callAppenders(loggingEvent0);
        LogMF.trace(logger0, "", false);
        LogMF.warn(logger0, (Throwable) mockThrowable0, "org.apache.log4j.LogMF", (Object[]) stringArray0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test017() throws Throwable {
        Class<Object> class0 = Object.class;
        Logger logger0 = Logger.getLogger(class0);
        LogMF.info(logger0, "xJ", false);
        Level level0 = LogXF.TRACE;
        Priority.toPriority((String) null);
        logger0.setAdditivity(true);
        LogMF.logrb(logger0, level0, "xJ", "xJ", (Object) "xJ", (Object) logger0, (Object) logger0);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        NOPLogger nOPLogger0 = (NOPLogger) nOPLoggerRepository0.getRootLogger();
        MockException mockException0 = new MockException();
        MockException mockException1 = new MockException(mockException0);
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) class0;
        objectArray0[2] = (Object) class0;
        objectArray0[3] = (Object) "xJ";
        LogMF.fatal((Logger) nOPLogger0, (Throwable) mockException1, "NeYq}`xBJ6 kBu\"n", objectArray0);
        LogMF.logrb(logger0, level0, "", "xJ", false);
        Logger logger1 = Category.exists("                ");
        // Undeclared exception!
        try {
            LogMF.warn(logger1, "", 10000);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.LogMF", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test019() throws Throwable {
        Class<Object> class0 = Object.class;
        Logger logger0 = Logger.getLogger(class0);
        LogMF.info(logger0, "xJ", false);
        Level level0 = LogXF.TRACE;
        LogMF.logrb(logger0, level0, "xJ", "xJ", (Object) "xJ", (Object) logger0, (Object) logger0);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        Logger logger1 = nOPLoggerRepository0.getRootLogger();
        MockException mockException0 = new MockException();
        MockException mockException1 = new MockException(mockException0);
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) class0;
        objectArray0[3] = (Object) "xJ";
        LogMF.fatal(logger1, (Throwable) mockException1, "NeYq}`xBJ6 kBu\"n", objectArray0);
        LogMF.logrb(logger0, level0, "", "xJ", false);
        Category.exists("                ");
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger2 = nOPLoggerRepository0.getLogger("", (LoggerFactory) defaultCategoryFactory0);
        Category.getInstance("org.apache.log4j.LogMF");
        Logger logger3 = Logger.getLogger("s.IY~y+BN");
        LogMF.trace(logger2, "                ", (-2735));
        Integer integer0 = new Integer(5000);
        Double double0 = new Double(30000);
        LogMF.logrb(logger3, level0, "", (String) null, (Object) "", (Object) integer0, (Object) double0);
    }


    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test021() throws Throwable {
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger0 = Logger.getLogger("J{]6bl`!`^G<l!U", (LoggerFactory) defaultCategoryFactory0);
        MockThrowable mockThrowable0 = new MockThrowable("J{]6bl`!`^G<l!U");
        MockException mockException0 = new MockException(mockThrowable0);
        StackTraceElement[] stackTraceElementArray0 = MockThrowable.replacement_getStackTrace(mockException0);
        defaultCategoryFactory0.makeNewLoggerInstance("FY");
        StackTraceElement stackTraceElement0 = new StackTraceElement("", "J{]6bl`!`^G<l!U", "c/5S$DeG{7DB%pZ", 2162);
        mockThrowable0.setOriginForDelegate(stackTraceElement0);
        MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
        MockException mockException1 = new MockException("org.apache.log4j.LogMF", mockThrowable1);
        mockException1.printStackTrace();
        Throwable[] throwableArray0 = mockException1.getSuppressed();
        logger0.fatal((Object) defaultCategoryFactory0, (Throwable) mockException1);
        LogMF.debug(logger0, "?bCU[I", 0L);
        LogMF.warn(logger0, ".=+aW5 \u0003=<", (Object) defaultCategoryFactory0);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        Logger logger1 = nOPLoggerRepository0.getLogger("Q");
        Level level0 = Level.FATAL;
        LogMF.logrb(logger1, level0, "org.apache.log4j.LogMF", "?bCU[I", (-1.0));
        LogMF.log(logger0, level0, (Throwable) mockThrowable1, "", (Object[]) stackTraceElementArray0);
        defaultCategoryFactory0.makeNewLoggerInstance("oracle.jrockit.jfr.settings.PresetFile$PresetFileFilter");
        LogMF.trace(logger0, "org.apache.log4j.LogMF", 'E');
        LogMF.fatal(logger0, (Throwable) mockException0, "VoBpn@3e^", (Object[]) stackTraceElementArray0);
        LogMF.info(logger0, "?bCU[I", (float) 2162);
        LogMF.trace(logger0, "FY", (Object[]) throwableArray0);
        LogMF.logrb(logger0, level0, "5:", "org.apache.log4j.LogMF", (Object) mockException1, (Object) defaultCategoryFactory0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Object> class0 = Object.class;
        Logger logger0 = Logger.getLogger(class0);
        LogMF.info(logger0, "xJ", false);
        Level level0 = LogXF.TRACE;
        Priority priority0 = Priority.toPriority((String) null);
        LogMF.logrb(logger0, level0, "xJ", "xJ", (Object) "xJ", (Object) logger0, (Object) logger0);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        Logger logger1 = nOPLoggerRepository0.getRootLogger();
        MockException mockException0 = new MockException();
        MockException mockException1 = new MockException(mockException0);
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) class0;
        objectArray0[2] = (Object) class0;
        objectArray0[3] = (Object) "xJ";
        LogMF.fatal(logger1, (Throwable) mockException1, "NeYq}`xBJ6 kBu\"n", objectArray0);
        LogMF.logrb(logger0, level0, "", "xJ", false);
        Logger logger2 = nOPLoggerRepository0.getLogger("xJ");
        LogMF.warn(logger2, "", 10000);
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger3 = nOPLoggerRepository0.getLogger("", (LoggerFactory) defaultCategoryFactory0);
        Logger logger4 = (Logger) Category.getInstance("org.apache.log4j.LogMF");
        Logger.getLogger("s.IY~y+BN");
        LogMF.trace(logger3, "                ", (-2735));
        Object object1 = new Object();
        LogMF.debug(logger4, "                ", object1, (Object) "", (Object) priority0);
        RollingCalendar rollingCalendar0 = new RollingCalendar();
        Date date0 = rollingCalendar0.getTime();
        LogMF.warn(logger0, "04Mj#nb5+@R6Os_S", (Object) date0, objectArray0[2]);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test023() throws Throwable {
        Class<Object> class0 = Object.class;
        Logger logger0 = Logger.getLogger(class0);
        LogMF.info(logger0, "%}xJ", false);
        Level level0 = LogXF.TRACE;
        Priority.toPriority((String) null);
        LogMF.logrb(logger0, level0, "%}xJ", "%}xJ", (Object) "%}xJ", (Object) logger0, (Object) logger0);
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        NOPLogger nOPLogger0 = (NOPLogger) nOPLoggerRepository0.getRootLogger();
        MockException mockException0 = new MockException();
        MockException mockException1 = new MockException(mockException0);
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) class0;
        objectArray0[2] = (Object) class0;
        objectArray0[3] = (Object) "%}xJ";
        LogMF.fatal((Logger) nOPLogger0, (Throwable) mockException1, "NeYq}`xBJ6 kBu\"n", objectArray0);
        LogMF.logrb(logger0, level0, "", "%}xJ", false);
        Logger logger1 = Category.exists("                ");
        // Undeclared exception!
        try {
            LogMF.warn(logger1, "", 10000);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.LogMF", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test025() throws Throwable {
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        Level level0 = Level.ALL;
        nOPLoggerRepository0.getCurrentCategories();
        level0.level = 0;
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger0 = nOPLoggerRepository0.getLogger("", (LoggerFactory) defaultCategoryFactory0);
        LogMF.debug(logger0, "javax.management.ObjectName", true);
        Double double0 = new Double(1.0);
        Integer integer0 = new Integer(0);
        Object object0 = new Object();
        LogMF.log(logger0, level0, "", (Object) double0, (Object) "", (Object) integer0, object0);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test026() throws Throwable {
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        assertNotNull(nOPLoggerRepository0);

        NOPLogger nOPLogger0 = (NOPLogger) nOPLoggerRepository0.getLogger("org.apache.log4j.ConsoleAppender$SystemErrStream");
        assertNotNull(nOPLogger0);
        assertFalse(nOPLogger0.isTraceEnabled());
        assertFalse(nOPLogger0.isInfoEnabled());
        assertFalse(nOPLogger0.isDebugEnabled());
        assertTrue(nOPLogger0.getAdditivity());
        assertEquals("org.apache.log4j.ConsoleAppender$SystemErrStream", nOPLogger0.getName());

        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        assertNotNull(defaultCategoryFactory0);

        NOPLogger nOPLogger1 = (NOPLogger) nOPLoggerRepository0.getLogger((String) null, (LoggerFactory) defaultCategoryFactory0);
        assertFalse(nOPLogger1.equals((Object) nOPLogger0));
        assertNotSame(nOPLogger1, nOPLogger0);
        assertNotNull(nOPLogger1);
        assertFalse(nOPLogger1.isDebugEnabled());
        assertTrue(nOPLogger1.getAdditivity());
        assertFalse(nOPLogger1.isInfoEnabled());
        assertNull(nOPLogger1.getName());
        assertFalse(nOPLogger1.isTraceEnabled());

        LogMF.info((Logger) nOPLogger0, "Lz*0j%bG-/e!=", 0.0F);
        assertFalse(nOPLogger0.equals((Object) nOPLogger1));
        assertNotSame(nOPLogger0, nOPLogger1);
        assertFalse(nOPLogger0.isTraceEnabled());
        assertFalse(nOPLogger0.isInfoEnabled());
        assertFalse(nOPLogger0.isDebugEnabled());
        assertTrue(nOPLogger0.getAdditivity());
        assertEquals("org.apache.log4j.ConsoleAppender$SystemErrStream", nOPLogger0.getName());

        String string0 = ((Category) nOPLogger0).getResourceBundleString("Lz*0j%bG-/e!=");
        assertFalse(nOPLogger0.equals((Object) nOPLogger1));
        assertNotSame(nOPLogger0, nOPLogger1);
        assertNull(string0);
        assertFalse(nOPLogger0.isTraceEnabled());
        assertFalse(nOPLogger0.isInfoEnabled());
        assertFalse(nOPLogger0.isDebugEnabled());
        assertTrue(nOPLogger0.getAdditivity());
        assertEquals("org.apache.log4j.ConsoleAppender$SystemErrStream", nOPLogger0.getName());

        nOPLogger0.removeAppender("l|_I2C}DGR*]WW:BH");
        assertFalse(nOPLogger0.equals((Object) nOPLogger1));
        assertNotSame(nOPLogger0, nOPLogger1);
        assertFalse(nOPLogger0.isTraceEnabled());
        assertFalse(nOPLogger0.isInfoEnabled());
        assertFalse(nOPLogger0.isDebugEnabled());
        assertTrue(nOPLogger0.getAdditivity());
        assertEquals("org.apache.log4j.ConsoleAppender$SystemErrStream", nOPLogger0.getName());

        Double double0 = new Double(1.0);
        assertEquals(1.0, (double) double0, 0.01);
        assertNotNull(double0);

        LogMF.debug((Logger) nOPLogger0, "nP7$aATNLH}Mz<9e", (Object) double0, (Object) double0, (Object) "] as listener.", (Object) nOPLoggerRepository0);
        assertFalse(nOPLogger0.equals((Object) nOPLogger1));
        assertNotSame(nOPLogger0, nOPLogger1);
        assertFalse(nOPLogger0.isTraceEnabled());
        assertFalse(nOPLogger0.isInfoEnabled());
        assertFalse(nOPLogger0.isDebugEnabled());
        assertTrue(nOPLogger0.getAdditivity());
        assertEquals("org.apache.log4j.ConsoleAppender$SystemErrStream", nOPLogger0.getName());

        LogMF.warn((Logger) nOPLogger0, "org.apache.log4j.LayoutTest$MockLayout", (double) 0.0F);
        assertFalse(nOPLogger0.equals((Object) nOPLogger1));
        assertNotSame(nOPLogger0, nOPLogger1);
        assertFalse(nOPLogger0.isTraceEnabled());
        assertFalse(nOPLogger0.isInfoEnabled());
        assertFalse(nOPLogger0.isDebugEnabled());
        assertTrue(nOPLogger0.getAdditivity());
        assertEquals("org.apache.log4j.ConsoleAppender$SystemErrStream", nOPLogger0.getName());

        Logger logger0 = defaultCategoryFactory0.makeNewLoggerInstance("W'>q/TDVYx[J");
        assertNotNull(logger0);
        assertEquals("W'>q/TDVYx[J", logger0.getName());
        assertTrue(logger0.getAdditivity());

        Object object0 = new Object();
        assertNotNull(object0);

        Double double1 = new Double(1.0);
        assertEquals((double) double1, (double) double0, 0.01);
        assertEquals(1.0, (double) double1, 0.01);
        assertNotNull(double1);

        LogMF.warn((Logger) nOPLogger0, "nP7$aATNLH}Mz<9e", (Object) null, (Object) nOPLogger1, object0, (Object) double1);
        assertFalse(nOPLogger0.equals((Object) nOPLogger1));
        assertFalse(nOPLogger1.equals((Object) nOPLogger0));
        assertEquals((double) double1, (double) double0, 0.01);
        assertNotSame(nOPLogger0, nOPLogger1);
        assertNotSame(nOPLogger1, nOPLogger0);
        assertFalse(nOPLogger0.isTraceEnabled());
        assertFalse(nOPLogger0.isInfoEnabled());
        assertFalse(nOPLogger0.isDebugEnabled());
        assertTrue(nOPLogger0.getAdditivity());
        assertEquals("org.apache.log4j.ConsoleAppender$SystemErrStream", nOPLogger0.getName());
        assertFalse(nOPLogger1.isDebugEnabled());
        assertTrue(nOPLogger1.getAdditivity());
        assertFalse(nOPLogger1.isInfoEnabled());
        assertNull(nOPLogger1.getName());
        assertFalse(nOPLogger1.isTraceEnabled());

        MockThrowable mockThrowable0 = new MockThrowable("org.apache.log4j.LayoutTest$MockLayout");
        MockThrowable mockThrowable1 = new MockThrowable("] as listener.", mockThrowable0);
        Object[] objectArray0 = new Object[5];
        Object object1 = new Object();
        objectArray0[0] = object1;
        objectArray0[1] = (Object) "org.apache.log4j.LayoutTest$MockLayout";
        objectArray0[2] = (Object) nOPLogger0;
        objectArray0[3] = (Object) "] as listener.";
        objectArray0[4] = (Object) "l|_I2C}DGR*]WW:BH";
        // Undeclared exception!
        try {
            LogMF.info(logger0, (Throwable) mockThrowable1, (String) null, objectArray0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.Category", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test027() throws Throwable {
        FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
        Logger logger0 = null;
        Level level0 = Level.ERROR;
        level0.syslogEquivalent = 12;
        // Undeclared exception!
        try {
            LogMF.logrb((Logger) null, level0, "", "", '3');
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.LogMF", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test028() throws Throwable {
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger0 = Logger.getLogger("I(v ", (LoggerFactory) defaultCategoryFactory0);
        Category.getDefaultHierarchy();
        Level level0 = Level.ERROR;
        MockException mockException0 = new MockException((String) null);
        logger0.l7dlog((Priority) level0, "I(v ", (Object[]) null, (Throwable) mockException0);
        level0.level = (-1);
        Level level1 = Level.toLevel(0, level0);
        LogMF.log(logger0, level1, "I(v ", (double) 50000);
        level1.syslogEquivalent = (-2941);
        Object[] objectArray0 = new Object[5];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) "I(v ";
        Object object1 = new Object();
        Logger logger1 = defaultCategoryFactory0.makeNewLoggerInstance("mV$7");
        objectArray0[2] = object1;
        objectArray0[3] = (Object) level0;
        objectArray0[4] = (Object) "I(v ";
        LogMF.trace(logger0, "5ka/Fdi>fI=$7(x", objectArray0);
        Object object2 = new Object();
        Integer integer0 = new Integer((-4535));
        LogMF.debug(logger0, "5ka/Fdi>fI=$7(x", (Object) level1, object0, object2, (Object) integer0);
        LogMF.debug(logger0, "L44eadKT1xc?+/", objectArray0);
        // Undeclared exception!
        try {
            LogMF.info(logger1, "mV$7", false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.Category", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test029() throws Throwable {
        Logger logger0 = null;
        String string0 = "V[X 'QL_pGGUm_6M+";
        FileSystemHandling.shouldAllThrowIOExceptions();
        Level level0 = Level.TRACE;
        Level.toLevel("V[X 'QL_pGGUm_6M+", level0);
        String string1 = "d7a1&%Gx]dR\\P5f<)";
        Level.toLevel("V[X 'QL_pGGUm_6M+");
        String string2 = "";
        Integer integer0 = new Integer(5000);
        Level level1 = Level.FATAL;
        // Undeclared exception!
        try {
            LogMF.debug((Logger) null, "=r$R)p|\u0001", (Object) "V[X 'QL_pGGUm_6M+");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.LogMF", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test030() throws Throwable {
        Logger logger0 = Logger.getRootLogger();
        Level level0 = Level.INFO;
        Category.getCurrentCategories();
        Level level1 = Level.toLevel("cN:-mKV0(,/?", level0);
        Float float0 = new Float(0.0F);
        LoggingEvent loggingEvent0 = new LoggingEvent("org.apache.log4j.LogMF", logger0, (-2260L), level1, float0, (Throwable) null);
        logger0.callAppenders(loggingEvent0);
        LogMF.trace(logger0, "", '@');
        Level level2 = Level.INFO;
        level1.syslogEquivalent = 10000;
        LogMF.logrb(logger0, level2, "", "m.|U6^", Integer.MAX_VALUE);
        loggingEvent0.getMDCCopy();
        loggingEvent0.getRenderedMessage();
        LogMF.debug(logger0, "org.apache.log4j.LogMF", (long) 40000);
        Float float1 = new Float((-1747.927));
        Double double0 = new Double(20000);
        Double.min(30000, 40000);
        LogMF.warn(logger0, "cN:-mKV0(,/?", (Object) float1, (Object) double0, (Object) loggingEvent0);
        LogMF.debug(logger0, "cN:-mKV0(,/?", 0.0F);
        LogMF.warn(logger0, "{u>Hr+EU5a8[ad", (Object) "", (Object) logger0, (Object) null, (Object) "");
        LogMF.trace(logger0, "f[_@k_~c5:", (float) 10000);
        LogMF.info(logger0, "org.apache.log4j.LogMF", 1002);
        Object object0 = new Object();
        Object object1 = new Object();
        LogMF.debug(logger0, "uX~H", object0, object1);
        // Undeclared exception!
        try {
            LogMF.logrb(logger0, (Level) null, "", "", false);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.Category", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test031() throws Throwable {
        NOPLoggerRepository nOPLoggerRepository0 = new NOPLoggerRepository();
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger0 = nOPLoggerRepository0.getLogger("", (LoggerFactory) defaultCategoryFactory0);
        LogMF.debug(logger0, "addLoggerMBean", (short) 2063);
        Level level0 = Level.FATAL;
        MockThrowable mockThrowable0 = new MockThrowable("pHbF.");
        NOPLoggerRepository nOPLoggerRepository1 = new NOPLoggerRepository();
        nOPLoggerRepository1.getThreshold();
        Priority.toPriority("pHbF.", (Priority) level0);
        Object[] objectArray0 = new Object[2];
        objectArray0[0] = (Object) null;
        Object object0 = new Object();
        objectArray0[1] = object0;
        LogMF.trace(logger0, "pHbF.", true);
    }

    /*
    * Informações do teste
    *
    * Plausível: não
    *     - O teste é complexo de ser entendido.
    *
    * Compreensivel: não
    *     - Tanto o comportamento do teste, quanto suas instruções não são compreesíveis.
    */
    @Test(timeout = 4000)
    public void test032() throws Throwable {
        DefaultCategoryFactory defaultCategoryFactory0 = new DefaultCategoryFactory();
        Logger logger0 = Logger.getLogger("", (LoggerFactory) defaultCategoryFactory0);
        Float float0 = new Float((-1190.48F));
        LogMF.trace(logger0, "", (Object) "", (Object) float0, (Object) logger0);
        Level level0 = Level.ERROR;
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 62;
        byteArray0[1] = (byte) 10;
        byteArray0[2] = (byte) 124;
        byteArray0[3] = (byte) 14;
        FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
        LogMF.logrb(logger0, level0, "", "org.apache.log4j.LogMF", 3336.381458);
        LogMF.info(logger0, "", (short) (-4828));
        LogMF.logrb(logger0, level0, "", "org.apache.log4j.pattern.LineLocationPatternConverter", false);
        LogMF.info(logger0, "", (byte) (-21));
    }
}
