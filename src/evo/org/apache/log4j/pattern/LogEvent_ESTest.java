/*
* This file was automatically generated by EvoSuite
* Thu Feb 27 20:57:38 GMT 2020
*/

package org.apache.log4j.pattern;

import org.apache.log4j.Category;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.Priority;
import org.apache.log4j.pattern.LogEvent;
import org.apache.log4j.spi.LocationInfo;
import org.apache.log4j.spi.ThrowableInformation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.Map;

import static org.evosuite.runtime.EvoAssertions.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.junit.Assert.*;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class LogEvent_ESTest extends LogEvent_ESTest_scaffolding {

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(logger0).getName();
        Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
        ThrowableInformation throwableInformation0 = mock(ThrowableInformation.class, new ViolatedAssumptionAnswer());
        LocationInfo locationInfo0 = mock(LocationInfo.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("", logger0, 0L, level0, level0, "RVOx", throwableInformation0, "", locationInfo0, (Map) null);
        long long0 = logEvent0.getTimeStamp();
        assertEquals("", logEvent0.getFQNOfLoggerClass());
        assertEquals(0L, long0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn("").when(category0).getName();
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("", category0, 81L, (Priority) null, (Object) null, throwable0);
        long long0 = logEvent0.getTimeStamp();
        assertEquals(81L, long0);
        assertEquals("", logEvent0.getFQNOfLoggerClass());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(category0).getName();
        Priority priority0 = mock(Priority.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent(" R`5qgN", category0, (-3527L), priority0, "%%Jopf", (Throwable) null);
        ThrowableInformation throwableInformation0 = logEvent0.getThrowableInformation();
        assertNull(throwableInformation0);
        assertEquals((-3527L), logEvent0.timeStamp);
        assertEquals(" R`5qgN", logEvent0.getFQNOfLoggerClass());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
        doReturn("Y%T4qM 6>AZ").when(logger0).getName();
        Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
        ThrowableInformation throwableInformation0 = mock(ThrowableInformation.class, new ViolatedAssumptionAnswer());
        LocationInfo locationInfo0 = mock(LocationInfo.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("Y%T4qM 6>AZ", logger0, 2902L, level0, "Y%T4qM 6>AZ", "", throwableInformation0, "", locationInfo0, (Map) null);
        String string0 = logEvent0.getThreadName();
        assertEquals("Y%T4qM 6>AZ", logEvent0.getFQNOfLoggerClass());
        assertEquals("", string0);
        assertEquals(2902L, logEvent0.timeStamp);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(logger0).getName();
        Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
        ThrowableInformation throwableInformation0 = mock(ThrowableInformation.class, new ViolatedAssumptionAnswer());
        LocationInfo locationInfo0 = mock(LocationInfo.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("Qw!R#)", logger0, 1L, level0, level0, "Qw!R#)", throwableInformation0, "", locationInfo0, (Map) null);
        String string0 = logEvent0.getNDC();
        assertEquals(1L, logEvent0.timeStamp);
        assertEquals("Qw!R#)", logEvent0.getFQNOfLoggerClass());
        assertEquals("", string0);
        assertNotNull(string0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(category0).getName();
        Priority priority0 = mock(Priority.class, new ViolatedAssumptionAnswer());
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("", category0, priority0, priority0, throwable0);
        String string0 = logEvent0.getLoggerName();
        assertEquals("", logEvent0.getFQNOfLoggerClass());
        assertNull(string0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(category0).getName();
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("", category0, (Priority) null, "", throwable0);
        logEvent0.getLevel();
        assertEquals("", logEvent0.getFQNOfLoggerClass());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(category0).getName();
        Priority priority0 = mock(Priority.class, new ViolatedAssumptionAnswer());
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent((String) null, category0, (-3478L), priority0, (Object) null, throwable0);
        String string0 = logEvent0.getFQNOfLoggerClass();
        assertNull(string0);
        assertEquals((-3478L), logEvent0.timeStamp);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(category0).getName();
        Priority priority0 = mock(Priority.class, new ViolatedAssumptionAnswer());
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("7)o\"=Iy/hWx'>(XZ{", category0, (-1L), priority0, priority0, throwable0);
        String string0 = logEvent0.getFQNOfLoggerClass();
        assertEquals("7)o\"=Iy/hWx'>(XZ{", string0);
        assertEquals((-1L), logEvent0.timeStamp);
        assertNotNull(string0);
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método setProperty() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn("").when(category0).getName();
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("", category0, 81L, (Priority) null, (Object) null, throwable0);
        // Undeclared exception!
        try {
            logEvent0.setProperty("0O.oI\"/z~}I3o", (String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Hashtable", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método getRenderedMessage() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
        ThrowableInformation throwableInformation0 = mock(ThrowableInformation.class, new ViolatedAssumptionAnswer());
        LocationInfo locationInfo0 = mock(LocationInfo.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("java.lang.Throwable", (Logger) null, (-2067L), level0, level0, "HvWGAV5tnB", throwableInformation0, "K}yI~:K", locationInfo0, (Map) null);
        // Undeclared exception!
        try {
            logEvent0.getRenderedMessage();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.pattern.LogEvent", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método getProperty() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(category0).getName();
        Priority priority0 = mock(Priority.class, new ViolatedAssumptionAnswer());
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("X)?`H_LQp~}|", category0, priority0, "X)?`H_LQp~}|", throwable0);
        logEvent0.setProperty("X)?`H_LQp~}|", "X)?`H_LQp~}|");
        // Undeclared exception!
        try {
            logEvent0.getProperty((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o método getMDC() com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test15() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(category0).getName();
        Priority priority0 = mock(Priority.class, new ViolatedAssumptionAnswer());
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("7)o\"=Iy/hWx'>(XZ{", category0, (-1L), priority0, priority0, throwable0);
        logEvent0.setProperty("7)o\"=Iy/hWx'>(XZ{", "7)o\"=Iy/hWx'>(XZ{");
        // Undeclared exception!
        try {
            logEvent0.getMDC((String) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     o construtor de LogEvent com parâmetros inválidos lança uma NullPointerException.
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Priority priority0 = mock(Priority.class, new ViolatedAssumptionAnswer());
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = null;
        try {
            logEvent0 = new LogEvent("_T", (Category) null, priority0, "_T", throwable0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("org.apache.log4j.pattern.LogEvent", e);
        }
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados. Por
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn("").when(category0).getName();
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("", category0, 81L, (Priority) null, (Object) null, throwable0);
        logEvent0.getProperties();
        assertEquals(81L, logEvent0.timeStamp);
        assertEquals("", logEvent0.getFQNOfLoggerClass());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados. Por
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(category0).getName();
        Priority priority0 = mock(Priority.class, new ViolatedAssumptionAnswer());
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("", category0, priority0, priority0, throwable0);
        logEvent0.setProperty("", "");
        Map map0 = logEvent0.getProperties();
        assertEquals("", logEvent0.getFQNOfLoggerClass());
        assertEquals(1, map0.size());
    }

    /*
    * Informações do teste
    *
    * Plausível: sim
    *     - O teste verifica os seguintes comportamentos: primeiro se ele pode ser executado no tempo de 4s; Em seguida, se
    *     LogEvent possui os valores iniciais iguais aos esperados. Por
    *
    * Compreensivel: sim
    *     - O comportamento do teste e suas instruções são parcialmente compreesíveis.
    */
    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Category category0 = mock(Category.class, new ViolatedAssumptionAnswer());
        doReturn("").when(category0).getName();
        Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
        LogEvent logEvent0 = new LogEvent("", category0, 81L, (Priority) null, (Object) null, throwable0);
        String string0 = logEvent0.getRenderedMessage();
        assertNull(string0);
        assertEquals(81L, logEvent0.timeStamp);
        assertEquals("", logEvent0.getFQNOfLoggerClass());
    }

}
